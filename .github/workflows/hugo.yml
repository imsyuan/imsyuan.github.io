# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.141.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
#      - name: Inject Google Ads ID
#        run: echo 'googleAnalytics = "${{ secrets.GOOGLE_ANALYTICS_ID }}"' >> hugo.toml
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: America/Los_Angeles
          HUGO_GOOGLEANALYTICS: ${{ secrets.GOOGLE_ANALYTICS_ID }}
        run: |
          hugo \
            --gc \
            --minify \
            --environment production
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    runs-on: ubuntu-latest
    needs: deploy  # 確保在部署成功後才執行通知
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: content/posts/**
          separator: "|"

      - name: Extract Post Info
        if: steps.changed-files.outputs.any_changed == 'true'
        id: post-info
        run: |
          for file in $(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr '|' '\n'); do
            if [[ $file == content/posts/* ]]; then
              if [[ -f $file ]]; then
                title=$(grep -m 1 "title:" "$file" | sed 's/title: *//;s/"//g')
                url=$(echo "$file" | sed 's/content\/posts\///;s/\.md$//')
                baseURL="${{ steps.deployment.outputs.page_url }}"
                echo "POST_TITLE=$title" >> $GITHUB_ENV
                echo "POST_URL=$baseURL/posts/$url" >> $GITHUB_ENV
              else
                echo "File $file does not exist."
              fi
            fi
          done

      - name: Send Line Message
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          message='{
            "type": "flex",
            "altText": "新文章發布：${{ env.POST_TITLE }}",
            "contents": {
              "type": "bubble",
              "header": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "🎉 新文章發布",
                    "weight": "bold",
                    "size": "xl"
                  }
                ]
              },
              "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "${{ env.POST_TITLE }}",
                    "wrap": true,
                    "weight": "bold",
                    "size": "md"
                  },
                  {
                    "type": "button",
                    "style": "primary",
                    "action": {
                      "type": "uri",
                      "label": "閱讀文章",
                      "uri": "${{ env.POST_URL }}"
                    },
                    "margin": "md"
                  }
                ]
              }
            }
          }'
          
          curl -X POST https://api.line.me/v2/bot/message/broadcast \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
            -d "{
              \"messages\": [$message]
            }"